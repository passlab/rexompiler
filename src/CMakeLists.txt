set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Ddisc_union=union")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Ddisc_union=union")

########################################################################################################################
# Configuration header files
########################################################################################################################

# The rose_config.h file generated during the configuration process contains CPP symbols that indicate what features are
# available during compilation.  This file cannot be included into end-user source code because it pollutes the global
# namespace.  Therefore, we create a copy called rosePublicConfig.h containing only certain symbols and whose names are
# modified by prepending "ROSE_".

add_custom_command(
  OUTPUT ${CMAKE_BINARY_DIR}/rosePublicConfig.h
  COMMAND ${PERL_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/publicConfiguration.pl
    <${CMAKE_BINARY_DIR}/rose_config.h >${CMAKE_BINARY_DIR}/rosePublicConfig.h
  DEPENDS ${CMAKE_BINARY_DIR}/rose_config.h)

add_custom_target(
  generate_rosePublicConfig
  DEPENDS ${CMAKE_BINARY_DIR}/rosePublicConfig.h)

########################################################################################################################
# ROSETTA
########################################################################################################################

# Header files needed to build ROSETTA
include_directories(
  ${CMAKE_SOURCE_DIR}/src/midend/programTransformation/transformationTracking
  ${CMAKE_BINARY_DIR}/src/3rdPartyLibraries/fortran-parser
  ${JAVA_INCLUDE_PATH}
  ${JAVA_INCLUDE_PATH2}
  ${CMAKE_SOURCE_DIR}/src/util
  ${CMAKE_SOURCE_DIR}/src/frontend
  ${ROSE_INCLUDES})

# ROSETTA-generated headers files. If one of these headers is no longer generated, "make" will repeatedly run the rule
# to try to generate it.
set(ROSETTA_HEADERS
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/AstQueryMemoryPool.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.h
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalAccessEnums.h
)

# ROSETTA-generated source files.
set(ROSETTA_SRC
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCheckingIfDataMembersAreInMemoryPool.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarCopyMemberFunctions.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarGetChildIndex.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewAndDeleteOperators.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarNewConstructors.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarProcessDataMemberReferenceToPointers.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnClassHierarchySubTree.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarReturnDataMemberPointers.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarRTI.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTraverseMemoryPool.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarTreeTraversalSuccessorContainer.C
  ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_GrammarVariantEnumNames.C
)

# Tell cmake that these files are generated by ROSETTA and will only be available at compile time
set_source_files_properties(${ROSETTA_SRC} ${ROSETTA_HEADERS} PROPERTIES GENERATED 1)

if(MSVC)
  set_source_files_properties(
    ${CMAKE_BINARY_DIR}/src/frontend/SageIII/Cxx_Grammar.C
    PROPERTIES COMPILE_FLAGS /bigobj)
endif()

########################################################################################################################
# Subdirs for the ROSE library
########################################################################################################################

# Build in the subdirectories that make up the ROSE source code
add_subdirectory(util)
add_subdirectory(ROSETTA)
add_subdirectory(3rdPartyLibraries)

add_definitions(-DROSE_DLL_EXPORTS)

add_subdirectory(frontend)
add_subdirectory(midend)
add_subdirectory(backend)

########################################################################################################################
# The ROSE library
########################################################################################################################

set(rose_LIB_SRCS
  dummyCppFileForLibrose.C
  ${ROSETTA_SRC}
  $<TARGET_OBJECTS:util_main>
  $<TARGET_OBJECTS:util_commandlineProcessing>
  $<TARGET_OBJECTS:util_StringUtility>
  $<TARGET_OBJECTS:util_support>
  $<TARGET_OBJECTS:util_graphs>
  $<TARGET_OBJECTS:unparser>
  $<TARGET_OBJECTS:EDG>
  $<TARGET_OBJECTS:sage3>
  $<TARGET_OBJECTS:virtualCFG>
  $<TARGET_OBJECTS:astFixup>
  $<TARGET_OBJECTS:midend>
  $<TARGET_OBJECTS:abstractLayer>
  $<TARGET_OBJECTS:astDiagnostics>
  $<TARGET_OBJECTS:astProcessing>
  $<TARGET_OBJECTS:midend_util>
  $<TARGET_OBJECTS:midend_pt>
  $<TARGET_OBJECTS:ompparser>
  $<TARGET_OBJECTS:accparser>
  $<TARGET_OBJECTS:sageInterface>
  $<TARGET_OBJECTS:astTokenStream>
  $<TARGET_OBJECTS:astHiddenTypeAndDeclarationLists>
  $<TARGET_OBJECTS:astDump>
  $<TARGET_OBJECTS:includeDirectivesProcessing>
  $<TARGET_OBJECTS:astPostProcessing>
  $<TARGET_OBJECTS:trans_tracking>)

if(NOT enable-internalFrontendDevelopment)
  list(APPEND rose_LIB_SRCS
    $<TARGET_OBJECTS:midend_pa>
    $<TARGET_OBJECTS:midend_loopproc>)
endif()

# TODO Conditional either EDG or CLang or nothing
if(enable-cpp)
  list(APPEND rose_LIB_SRCS $<TARGET_OBJECTS:edg_internal> $<TARGET_OBJECTS:newsage>)
endif()

########################################################################################################################
# The ROSE library itself (librose.so, librose.a, librose.dll)
########################################################################################################################

add_library(ROSE_DLL SHARED ${rose_LIB_SRCS} )

add_dependencies(ROSE_DLL roseUtil)

set_target_properties(ROSE_DLL PROPERTIES OUTPUT_NAME "rose")

target_link_libraries(ROSE_DLL ${link_with_libraries})

set_target_properties(ROSE_DLL PROPERTIES
  VERSION 1.0.0
  SOVERSION 1
  DEFINE_SYMBOL ROSE_DLL_EXPORTS)

install(TARGETS ROSE_DLL DESTINATION ${ROSE_LIB_DIR_NAME})
install(
  FILES
    featureTests.h rose.h roseInternal.h rose_msvc.h msvc_stdint.h
    ${CMAKE_BINARY_DIR}/rosePublicConfig.h
  DESTINATION ${INCLUDE_INSTALL_DIR})

########################################################################################################################
# Dependencies of the ROSE library. librose depends on additional libraries.
########################################################################################################################

# Z3 has an executable component and a development (library and headers) component that can be installed independently
# of each other. Therfore Z3_FOUND_EXE says whether the executable component was found, and Z3_FOUND_LIB says whether
# the development component was found; Z3_FOUND is set if either component is found.
if(Z3_FOUND_LIB)
  target_link_libraries(ROSE_DLL ${Z3_LIBRARY})
endif()

# Zlib is a compression library and is needed by Boost. Make sure you compiled Boost with this same zlib.
if(ZLIB_FOUND)
  target_link_libraries(ROSE_DLL ${ZLIB_LIBRARY})
endif()

set(LINK_FILES
  libhpdf
  ${CMAKE_DL_LIBS})

# ???
if(NOT BINARY_EDG)
  add_definitions(-DUSE_FAKE_EDG)
endif()

# Depending on which language analysis (frontend) features are enabled in ROSE, we may need some additional libraries.
if(enable-fortran)
  list(APPEND LINK_FILES roseFortran)
endif()

if (enable-java)
  list(APPEND LINK_FILES ${JAVA_JVM_LIBRARY})
endif()

# link ANTLR 4 C++ runtime
# On Ubuntu 20.04, it is installed to /usr/lib
list(APPEND LINK_FILES antlr4-runtime)

# This was an experiment to generate smaller files from ROSETTA. (I'm not sure of the status [Matzke 2019-02-02].)
if(enable-smaller-generated-files )
  set(ROSE_TARGET_LINK libgeneratedIR ${LINK_FILES})
else()
  set(ROSE_TARGET_LINK ${LINK_FILES})
endif()
if (WIN32)
  target_link_libraries(ROSE_DLL ${ROSE_TARGET_LINK} shlwapi.lib Ws2_32.lib)
else ()
  target_link_libraries(ROSE_DLL ${ROSE_TARGET_LINK} )
endif ()

# If the C preprocessor is enabled, ROSE has some additional depenendencies
if(enable-cpp)
  add_dependencies(ROSE_DLL ROSE_PREPROCESSOR ${edg_lib} libhpdf generate_rosePublicConfig)
endif()

########################################################################################################################
# testSharedRoseLib -- a basic test to make sure the ROSE library works
########################################################################################################################

remove_definitions(-DROSE_DLL_EXPORTS)
#add_executable(testSharedRoseLib testRoseLib.C)
#target_link_libraries(testSharedRoseLib ROSE_DLL ${link_with_libraries})

########################################################################################################################
# The rose-config tool (Deprecated; use the rose-config.cfg file directly instead)
########################################################################################################################

add_definitions(-DLIBDIR="${CMAKE_INSTALL_PREFIX}/${ROSE_LIB_DIR_NAME}") #LIB_INSTALL_DIR ?
add_executable(rose-config rose-config.C)
target_link_libraries(rose-config ROSE_DLL ${link_with_libraries})
install(TARGETS rose-config DESTINATION bin)

########################################################################################################################
# The rose-compiler tool
########################################################################################################################

add_executable(rose-compiler rose-compiler.C)
target_link_libraries(rose-compiler ROSE_DLL ${link_with_libraries})
install(TARGETS rose-compiler DESTINATION bin)


########################################################################################################################
# rose-config.cfg -- text file that contains various settings for user-level makefiles.
########################################################################################################################

#Build LDFLAGS for ROSE tools
set(rose_config_installed_cppflags "-I${CMAKE_INSTALL_PREFIX}/include/rose")

set(rose_library_dir_list "${CMAKE_INSTALL_PREFIX}/${ROSE_LIB_DIR_NAME}")
set(rose_library_dir_list "${rose_library_dir_list}")
foreach(X IN LISTS rose_library_dir_list)
  set(rose_config_installed_ldflags "${rose_config_installed_ldflags} -L${X}")
endforeach()
set(rose_config_installed_cppflags "${rose_config_installed_cppflags} -I/usr/include")


set(rose_library_list "rose")
set(rose_library_list "${rose_library_list}")
set(rose_library_list "${rose_library_list};m;quadmath")

foreach(X IN LISTS rose_library_list)
  get_filename_component(Y ${X} NAME_WE)
  if(${Y} MATCHES "-l.*")
    string(SUBSTRING ${Y} 2 -1 Y)
  endif()
  if(${Y} MATCHES "lib.*")
    string(SUBSTRING ${Y} 3 -1 Y)
  endif()
  set(rose_config_installed_ldflags "${rose_config_installed_ldflags} -l${Y}")
endforeach()

file(REMOVE ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg)
file(WRITE  ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "# Things that the 'rose-config' tool can report\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CC           = ${BACKEND_C_COMPILER_NAME_WITHOUT_PATH}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CCPATH       = ${CMAKE_C_COMPILER}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CXX          = ${BACKEND_CXX_COMPILER_NAME_WITHOUT_PATH}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CXX_PATH     = ${CMAKE_CXX_COMPILER}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CPPFLAGS     = ${rose_config_installed_cppflags}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CFLAGS       = ${CMAKE_C_FLAGS}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_CXXFLAGS     = ${CMAKE_CXX_FLAGS}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_LDFLAGS      = ${rose_config_installed_ldflags}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_LIBDIRS      = ${CMAKE_INSTALL_PREFIX}/${ROSE_LIB_DIR_NAME}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_PREFIX       = ${CMAKE_INSTALL_PREFIX}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "# Additional items useful to include in Makefiles\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_RPATHS       = ${CMAKE_INSTALL_RPATH}\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_LINK_RPATHS  = unknown\n")
file(APPEND ${ROSE_TOP_BINARY_DIR}/src/rose-config.cfg "ROSE_VERSION      = ${ROSE_PACKAGE_VERSION}\n")
install(FILES ${CMAKE_BINARY_DIR}/src/rose-config.cfg DESTINATION ${ROSE_LIB_DIR_NAME})
